// No imports needed: web3, anchor, pg and more are globally available

describe("Test", () => {
  it("RunningRight", async () => {
    const wallet = new web3.Keypair();

    const [newGameDataAccount, bump] =
      await anchor.web3.PublicKey.findProgramAddress(
        [Buffer.from("level1", "utf8")],
        //[pg.wallet.publicKey.toBuffer()],
        pg.program.programId
      );

    // Fetch the created account
    let gameDateAccount = await pg.program.account.gameDataAccount.fetch(
      newGameDataAccount
    );

    let txHash;
    if (gameDateAccount == null) {
      txHash = await pg.program.methods
        .initialize()
        .accounts({
          newGameDataAccount: newGameDataAccount,
          signer: pg.wallet.publicKey,
          systemProgram: web3.SystemProgram.programId,
        })
        .signers([pg.wallet.keypair])
        .rpc();

      console.log(`Use 'solana confirm -v ${txHash}' to see the logs`);
      await pg.connection.confirmTransaction(txHash);
    }

    for (let i = 0; i < 3; i++) {
      txHash = await pg.program.methods
        .moveRight()
        .accounts({
          gameDataAccount: newGameDataAccount,
        })
        .signers([pg.wallet.keypair])
        .rpc();
      console.log(`Use 'solana confirm -v ${txHash}' to see the logs`);
      await pg.connection.confirmTransaction(txHash);
    }

    // Fetch the created account
    gameDateAccount = await pg.program.account.gameDataAccount.fetch(
      newGameDataAccount
    );

    console.log("On-chain data is:", gameDateAccount.playerPosition.toString());

    // Check whether the data on-chain is equal to local 'data'
    assert(3 == gameDateAccount.playerPosition);
  });

  it("RunningLeft", async () => {
    const wallet = new web3.Keypair();

    const [newGameDataAccount, bump] =
      await anchor.web3.PublicKey.findProgramAddress(
        [Buffer.from("level1", "utf8")],
        //[pg.wallet.publicKey.toBuffer()],
        pg.program.programId
      );

    let txHash = await pg.program.methods
      .initialize()
      .accounts({
        newGameDataAccount: newGameDataAccount,
        signer: pg.wallet.publicKey,
        systemProgram: web3.SystemProgram.programId,
      })
      .rpc();

    console.log(`Use 'solana confirm -v ${txHash}' to see the logs`);
    await pg.connection.confirmTransaction(txHash);

    for (let i = 0; i < 2; i++) {
      txHash = await pg.program.methods
        .moveLeft()
        .accounts({
          gameDataAccount: newGameDataAccount,
        })
        .rpc();
      console.log(`Use 'solana confirm -v ${txHash}' to see the logs`);
      await pg.connection.confirmTransaction(txHash);
    }

    // Fetch the created account
    const gameData = await pg.program.account.gameDataAccount.fetch(
      newGameDataAccount
    );

    console.log("Player position is:", gameData.playerPosition.toString());

    // Check whether the data on-chain is equal to local 'data'
    assert(0 == gameData.playerPosition);
  });
});
